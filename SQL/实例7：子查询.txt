show databases;

use db2;

show tables;

select * from 员工信息;

select * from 学生信息;


-- ==================================================================
-- 删除表，需要注意的是，由于构建了外键，导致部门信息表是主表
-- 不能在员工表还存在的时候删除部门信息表

drop table if EXISTS 员工信息表;
drop table if EXISTS 部门信息表;



-- ==================================================================


create table if not EXISTS 部门信息表(

	id int primary key auto_increment,
	name varchar(20) not null unique,
	address varchar(10) DEFAULT '未知'
);



insert into 部门信息表(id ,name,address)
VALUES
(1, '研发部门' , '广州'),
(2, '销售部门' , '深圳');


-- 要想触发非空指令是需要在输入格式欸对时候就不写哪一项才可以
insert into 部门信息表(id,name)
VALUES
(3,'网安部门');

-- ===============================================================================



create table if not EXISTS 员工信息表 (

	id int not null PRIMARY key auto_increment,
	name VARCHAR(20),
	age int,
	所在部门id int,
	CONSTRAINT fk_员工信息表_部门信息表 FOREIGN key (所在部门id) REFERENCES 部门信息表(id)
	-- 如果要创建外键，则代表要先创建部门信息表(主表)
);

insert into 员工信息表(id,name,age,所在部门id)
values
(1,'张三',20,1),
(2,'李四',21,1),
(3,'王五',19,1),
(4,'赵六',20,2),
(5,'孙七',22,2),
(6,'周八',18,2),
(7,'欸嘿',18,null);



select * from 员工信息表,部门信息表;
-- 这种方式是不正确的
-- 这种方式会使得每个1表中的信息去搭配二表中的所有信息

-- 内连接查询：查询两个表的交集
-- 隐式内连接
select * from 员工信息表,部门信息表 
where 
所在部门id = 部门信息表.id;

select 员工信息表.id 员工id ,员工信息表.name 员工姓名 ,age, 部门信息表.name , address 
from 
员工信息表,部门信息表
WHERE
所在部门id = 部门信息表.id;
-- 这样就可以将两张表合二为一

-- 优化：如果表的名字太长就不方便，可以选择给表起别名

select t1.id 员工id, t1.name 员工姓名 , age ,t2.name ,address 
from 
员工信息表 t1 , 部门信息表 t2
where 
所在部门id = t2.id;

-- 外连接
-- 打印a表中的所有数据和与b相交部分的数据
-- 翻译：
-- 打印a表中所有数据，能与b表匹配就打印相应的b表信息
-- 下面的代码就可以打印出上面代码打印不出的 ’欸嘿‘ 的信息
select t1.id 员工id, t1.name 员工姓名 , age ,t2.name ,address 
from 
员工信息表 t1 left join 部门信息表 t2
on
所在部门id = t2.id;


select t1.id 员工id, t1.name 员工姓名 , age ,t2.name ,address 
from 
员工信息表 t1 right join 部门信息表 t2
on
所在部门id = t2.id;
-- left 和 right 描述的是两张表在代码里面的相对位置



-- 子查询 （在查询中嵌套查询

-- 例如查询员工中年龄比'周八' 大的

select * from 员工信息表
WHERE
age > (select age from 员工信息表 where name = '周八');

-- 子查询查出来的东西可以作为一种数据
-- 比如一个数据，或者数据的集合，甚至查出来是一张表
-- 对于这些数据，与基本查询的语法类似
select * from 员工信息表
where 
所在部门id in (select id from 部门信息表);
-- 这里子查询查出来的就是数据的集合，判断数字是否在这一区间内用in的查询语法

select * FROM
(select * from 员工信息表 where age >18) t1, 部门信息表
where 
t1.所在部门id = 部门信息表.id; 
-- 子查询查询出来的结果是张表，可以将该表作为新的一张表与其他表进行联合查询





