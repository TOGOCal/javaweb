show DATABASES;
-- 显示有多少个数据库

use db2;
-- 使用db2这个数据库

show TABLES;
-- 显示db2这个数据库中的表

desc 学生信息;
-- 显示表的结构（注意是结构，其中不包含内容

select * from 学生信息;
-- 显示表及其内容

insert into 学生信息
VALUES
 (1,"张三","女","1997-10-7",93,"List@张三.cn",'15208299827',2),
 (1,'张飞','男',null,100,'List@张飞.cn',null,1);
 

-- 查询name age 两列
select name,gender
from
 学生信息;


-- 去除重复的项（在打印时候如果有重复项就纸打印一个
select distinct name
from 
 学生信息;

-- 这个去除重复项的distinct 好像只能修饰一个字符
select distinct name,tel
FROM
 学生信息;
 


 -- 起别名
 -- 防止文件中储存的表名难以理解，可以对其名字起别名
 -- AS 可以不写
 select distinct name as 姓名, gender as 性别,tel 电话号码
 from
 学生信息;


-- 条件查询
select distinct name 姓名,score 成绩 from 学生信息 where score >= 90 ;



select distinct name 姓名 ,score 成绩 FROM
学生信息 
where
score between 80 and 95;
-- 这两个数大小好像不能写反（小的在左边，大的在右边


select distinct name 姓名, score 成绩, birthday from 学生信息
WHERE
 birthday between '1950-01-01' and '2050-01-01';
-- 生日也可以作为大小来比较（date类型的数据



select * from 学生信息
where 
score =100 OR score =93;

select * from 学生信息
where
score IN (100,93);
-- 这上面这两行是等效的
-- 括号里面相当于一个集合，只要满足集合中任意一个数都会执行程序

select * from 学生信息
where 
name = '张三';
-- 字符串之类的也是用的等于



-- 模糊查询
-- 比如要查询姓 张 的
select * from 学生信息
where
name like '张%';
-- 这样查询就代表了张是第一个字且不用管之后有多少个字

-- 查询第二个字是飞的
select * from 学生信息
where 
name like '_飞%';
-- 由此可见
-- '_'则确定前面有1个字（应该可以多写
-- '%'代表多个字符，（可以是0个 



-- 排序查询
select * from 学生信息
order by 
birthday;
-- 不写则默认按照升序进行排列


select * from 学生信息
order by
tel desc;-- 降序
-- asc升序，desc降序


select * from 学生信息
order by 
tel desc , score asc;
-- 有两个判断标准的则意味着
-- 如果第一个标准相等，则按照第二个标准进行排列




-- 聚合函数（对数据进行统计操作）

select count(name) from 学生信息;
select count(birthday) from 学生信息;
-- 这里结果不相同的原因是在birthday那一行中张飞的信息我设成了空，而null不参与任何函数运算

select count(*) from 学生信息;
-- 这种写法就代表，只要有一个数据不为空，这一行都会被统计下来

select max(id) from 学生信息;
-- id中最大的

select sum(score) from 学生信息;
-- 所有学生的成绩总和

select avg(score) from 学生信息;
-- 所有学生的平均分




-- 分组查询
show DATABASES;

use db2;

show tables;

select * from 学生信息;

insert into 学生信息 
VALUES
(5,'欸嘿','男','1998-01-23',95,'List@欸嘿','15208299418',2);

select status as 状态 ,avg(score) 
from 学生信息
group by status;
-- 以状态对学生进行分组并分别求其平均分
-- 本来 select status 这个是可以不用写得
-- 但是这样会导致平均分不知道对应关系
-- 所以一般要加上这个来展示对应关系

select status as 状态,avg(score),count(*)
from 学生信息
group by status;
-- 可以同时查询多个聚合函数

select status as 状态,avg(score),count(*)
from 学生信息
where score >= 95
group by status;
-- 仅对分数大于95的进行分组

select status as 状态 ,avg(score),count(*)
from 学生信息
where score >= 95
group by STATUS
having count(*)>4;
-- 分组后的显示条件，不满足的不显示



select * from 学生信息 limit 0,3;
-- 查询表中从0-2条条目


select * from 学生信息 limit 0,3;
-- 查询表中从0-2条条目

select * from 学生信息;


select * from 学生信息;
